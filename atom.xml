<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zarrar's Journaling]]></title>
  <link href="http://czarrar.github.io/atom.xml" rel="self"/>
  <link href="http://czarrar.github.io/"/>
  <updated>2013-12-30T17:23:48-05:00</updated>
  <id>http://czarrar.github.io/</id>
  <author>
    <name><![CDATA[Zarrar Shehzad]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CCS Derivatives]]></title>
    <link href="http://czarrar.github.io/blog/2013/12/30/ccs-derivatives/"/>
    <updated>2013-12-30T15:16:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/12/30/ccs-derivatives</id>
    <content type="html"><![CDATA[<p>These data are from Xinian’s lab and are preprocessed with CCS in-house (their house). Limited details on these scripts can be found at XXX.</p>

<p>All the derivatives (discussed below) were generated with a modified version of CPAC that allows for a ghetto version of quick pack (i.e., derivates can be generated with external inputs and not just CPAC preprocessed data). This particular blend of CPAC can be found in <code>/home2/data/Projects/CPAC_Regression_Test/2013-05-30_cwas/C-PAC</code>.</p>

<h2 id="ts-dr-falff-and-reho">TS, DR, (f)ALFF, and REHO</h2>

<p>The first batch of pre-processed data has been run and can be found in <code>/home2/data/Projects/ABIDE_Initiative/Derivatives/CCS/Output</code>. The different pipelines represent variations on filtering and/or global signal regression on the functional data: filt_global, filt_noglobal, nofilt_noglobal, nofilt_noglobal. </p>

<p>The scripts to run all this are located in <code>/home2/data/Projects/ABIDE_Initiative/CPAC/abide/config/40_xinian</code>. Below are explanations of some of these scripts.</p>

<ul>
  <li><em>00_create_filt_links.bash</em>: Since the names of the filtered data were not consistent between global and non-global preprocessed data, I created this script to create some soft-links and make life easier for later steps.</li>
  <li><em>02_gen_std_mask.bash</em>: Creates a mask based on the functional data in standard space.</li>
  <li><em>10_gen_quick_pack.py</em>: Not the best script but it generates a YAML file with information about the different preprocessed functional data from the CCS pipeline. This yaml file is similar to the subject file used by CPAC for doing preprocessing and more.</li>
  <li><em>20_run_quick_pack.py</em>: This runs CPAC to generate derivatives based on the quick pack yaml file from the previous step.</li>
</ul>

<h2 id="centrality">Centrality</h2>

<p>In order to run centrality, we need to first make a group mask. I did this with the following script: <code>00_gen_group_mask.py</code>. I didn’t need to generate any quick pack yaml files since that was done previously. And, I just ran <code>20_run_quick_pack.py</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast Eigenvector Centrality]]></title>
    <link href="http://czarrar.github.io/blog/2013/12/27/fast-eigenvector-centrality/"/>
    <updated>2013-12-27T19:15:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/12/27/fast-eigenvector-centrality</id>
    <content type="html"><![CDATA[<p>I’m working on adding the fast eigenvector centrality code<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> to CPAC. A big thing about the fast code is that it only works with unthresholded data. So one thing that we will do is </p>

<h2 id="unit-testing">Unit Testing</h2>

<p>I have a set of unit tests in <code>CPAC/network_centrality/tests/core.py</code>. I don’t like the filename core and should look to changing that. I wonder if the filenames can be somewhat generic with one file that has all the CPAC/nipype relevant code, another that has more utility functions, and a last one that does the core functionality. Something to consider.</p>

<p>So I have tests that use random data and run the following commands to generate the data:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Normalize Random Time-Series Data</span>
</span><span class="line"><span class="n">m</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">((</span><span class="n">ntpts</span><span class="p">,</span><span class="n">nvoxs</span><span class="p">))</span>
</span><span class="line"><span class="n">m</span> <span class="o">=</span> <span class="n">norm_cols</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
</span><span class="line"><span class="c"># Correlation Data with Range 0-1</span>
</span><span class="line"><span class="n">mm</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">T</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="c"># note that need to generate connectivity matrix here</span>
</span><span class="line"><span class="n">mm</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">mm</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note the range of the correlation values is changed to be 0-1 since</p>

<ol>
  <li>Negative values don’t make much sense for the eigenvectors</li>
  <li>The power method used in the fast approach is based on this range</li>
</ol>

<p>Then, we can create the two different outputs based on the original and faster approach.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">ref</span>  <span class="o">=</span> <span class="n">eigenvector_centrality</span><span class="p">(</span><span class="n">mm</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class="line"><span class="n">comp</span> <span class="o">=</span> <span class="n">fast_eigenvector_centrality</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We finally compare the outputs and make sure they are almost equal, which it should. This degree of similarity however seems to be a little lower when using real data.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">diff</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">ref</span><span class="o">-</span><span class="n">comp</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
</span><span class="line"><span class="n">ok_</span><span class="p">(</span><span class="n">diff</span> <span class="o">&lt;</span> <span class="n">np</span><span class="o">.</span><span class="n">spacing</span><span class="p">(</span><span class="mf">1e2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="confusion">Confusion</h2>

<p>One point of confusion is why do you multiply the eigenvectors by your correlation matrix and then divide by your dominant eigenvalue? This is done in CPAC’s standard eigenvector centrality code and likely stems from work in Lohmann et al<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. TODO: finish this section explaining my possible misunderstanding…</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>todo add citation.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>todo add citation.<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Smoothing]]></title>
    <link href="http://czarrar.github.io/blog/2013/12/27/test-smoothing/"/>
    <updated>2013-12-27T17:31:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/12/27/test-smoothing</id>
    <content type="html"><![CDATA[<p>[<strong>Note</strong>: This article was updated on 2013-12-30]</p>

<p>I added a few lines to the cpac pipeline that apply smoothing to the 4D functional file in standard space. The information can be found in <code>/home2/data/Projects/CPAC_Regression_Test/smooth_tests</code>.</p>

<h2 id="cpac-processing">CPAC Processing</h2>

<p>Today, I wanted to start some testing of this new code. I had some issues that were related to not using a most recent version of nipype and also not linking to this version properly. I ran this test on Friday but saw today that the CPAC output appeared a little strange. There were multiple pipeline directories when there should have been only one. I am rerunning it now as I changed the config file from running both ANTS and FSL for registration to just ANTS.</p>

<h2 id="testing">Testing</h2>

<p>The simplest way to test the code is to manually smooth the unsmoothed 4D data and compare it to the smoothed version run with CPAC. I have written such a test in <code>x_compare.py</code> within the same main directory.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Derivative Class]]></title>
    <link href="http://czarrar.github.io/blog/2013/12/20/derivative-class/"/>
    <updated>2013-12-20T21:36:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/12/20/derivative-class</id>
    <content type="html"><![CDATA[<p><strong>Mission:</strong><br />
» Refractor current derivative workflows in <code>cpac_pipeline.py</code> (if you choose to accept it)</p>

<p><strong>Why:</strong><br />
» Easier to read code<br />
» Easier to implement quick packs
» Testing should be much more straightforward
» Potential for an extension-like system for users to integrate their own derivatives in the future (plug-in-play)</p>

<p>I personally have two objectives with these changes based on working with the ABIDE dataset. First, it is to make it easier to use other preprocessed data as inputs to CPAC. Second, it is to add a new derivative (functional density mapping; Tomasi et al., 2010) to the current pipeline system.</p>

<h2 id="how-does-it-currently-work-using-reho-as-an-example">How does it currently work? Using REHO as an example.</h2>

<p>I will be focusing on the <code>CPAC/pipeline/cpac_pipeline.py</code> file. This is a bit of a gargantuan file and contains both high-level (in terms of the pipeline) and low-level code, so it can get a bit confusing to go through. With that said, having everything in one place like this also makes it easier to go through after you know your way around.</p>

<p>I’ll skip past most of this code till about line 1796<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> where the REHO workflow starts. Then, I’ll go line by line (somewhat) to understand what’s happening until line 1833 when this part of the REHO code ends. Let’s begin shall we? I might suggest a good whiskey, it goes well while reading certain code.</p>

<h3 id="getting-our-toes-wet">Getting our toes wet</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">new_stops_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line"><span class="n">new_strat_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line"><span class="n">num_strat</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>num_strat</code> stores the current strategy number (or index in a list, in this case). A strategy is one while run of the pipeline (i think), and anytime there is a fork in the pipeline (e.g., using versus not using bandpass filtering), a new strategy is created. This is all determined before as the data is preprocessed.</p>

<p>And it seems like the <code>new_stops_list</code> and <code>new_strat_list</code> do not get used in this section. So kindly ignore them. The <code>new_strat_list</code> is usually for when you add a new strategy to the list (i.e., there is a fork in the pipeline).</p>

<h3 id="getting-our-feet-wet">Getting our feet wet</h3>

<p>Ok so we haven’t even scratched the surface yet. Now I’ll throw all the code at you here for this section and then go through it gradually.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">if</span> <span class="mi">1</span> <span class="ow">in</span> <span class="n">c</span><span class="o">.</span><span class="n">runReHo</span><span class="p">:</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">strat</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">strat_list</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">        <span class="n">preproc</span> <span class="o">=</span> <span class="n">create_reho</span><span class="p">()</span>
</span><span class="line">        <span class="n">preproc</span><span class="o">.</span><span class="n">inputs</span><span class="o">.</span><span class="n">inputspec</span><span class="o">.</span><span class="n">cluster_size</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">clusterSize</span>
</span><span class="line">        <span class="n">reho</span> <span class="o">=</span> <span class="n">preproc</span><span class="o">.</span><span class="n">clone</span><span class="p">(</span><span class="s">&#39;reho_</span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">num_strat</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">try</span><span class="p">:</span>
</span><span class="line">            <span class="n">node</span><span class="p">,</span> <span class="n">out_file</span> <span class="o">=</span> <span class="n">strat</span><span class="o">.</span><span class="n">get_leaf_properties</span><span class="p">()</span>
</span><span class="line">            <span class="n">workflow</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">out_file</span><span class="p">,</span>
</span><span class="line">                             <span class="n">reho</span><span class="p">,</span> <span class="s">&#39;inputspec.rest_res_filt&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">            <span class="n">node</span><span class="p">,</span> <span class="n">out_file</span> <span class="o">=</span> <span class="n">strat</span><span class="o">.</span><span class="n">get_node_from_resource_pool</span><span class="p">(</span><span class="s">&#39;functional_brain_mask&#39;</span><span class="p">)</span>
</span><span class="line">            <span class="n">workflow</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">out_file</span><span class="p">,</span>
</span><span class="line">                             <span class="n">reho</span><span class="p">,</span> <span class="s">&#39;inputspec.rest_mask&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="k">except</span><span class="p">:</span>
</span><span class="line">            <span class="k">print</span> <span class="s">&#39;Invalid Connection: REHO:&#39;</span><span class="p">,</span> <span class="n">num_strat</span><span class="p">,</span> <span class="s">&#39; resource_pool: &#39;</span><span class="p">,</span> <span class="n">strat</span><span class="o">.</span><span class="n">get_resource_pool</span><span class="p">()</span>
</span><span class="line">            <span class="k">raise</span>
</span><span class="line">
</span><span class="line"><span class="n">strat</span><span class="o">.</span><span class="n">update_resource_pool</span><span class="p">({</span><span class="s">&#39;raw_reho_map&#39;</span><span class="p">:(</span><span class="n">reho</span><span class="p">,</span> <span class="s">&#39;outputspec.raw_reho_map&#39;</span><span class="p">)})</span>
</span><span class="line">        <span class="n">strat</span><span class="o">.</span><span class="n">update_resource_pool</span><span class="p">({</span><span class="s">&#39;reho_Z_img&#39;</span><span class="p">:(</span><span class="n">reho</span><span class="p">,</span> <span class="s">&#39;outputspec.z_score&#39;</span><span class="p">)})</span>
</span><span class="line">        <span class="n">strat</span><span class="o">.</span><span class="n">append_name</span><span class="p">(</span><span class="n">reho</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="n">create_log_node</span><span class="p">(</span><span class="n">reho</span><span class="p">,</span> <span class="s">&#39;outputspec.raw_reho_map&#39;</span><span class="p">,</span> <span class="n">num_strat</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="n">num_strat</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="lines-1-2">Lines 1-2</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">if</span> <span class="mi">1</span> <span class="ow">in</span> <span class="n">c</span><span class="o">.</span><span class="n">runReHo</span><span class="p">:</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">strat</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">strat_list</span><span class="p">):</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For all derivatives, we usually start with an if statement that checks if the user wants to run this particular derivative. Then we loop through each strategy to access the preprocessed functional data. The node information for these files are kept in the <code>strat_list</code>, which is a list of strategy objects. </p>

<h4 id="lines-4-6">Lines 4-6</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line">    <span class="n">preproc</span> <span class="o">=</span> <span class="n">create_reho</span><span class="p">()</span>
</span><span class="line">    <span class="n">preproc</span><span class="o">.</span><span class="n">inputs</span><span class="o">.</span><span class="n">inputspec</span><span class="o">.</span><span class="n">cluster_size</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">clusterSize</span>
</span><span class="line">    <span class="n">reho</span> <span class="o">=</span> <span class="n">preproc</span><span class="o">.</span><span class="n">clone</span><span class="p">(</span><span class="s">&#39;reho_</span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">num_strat</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is a little confusing but <code>preproc</code> is actually a workflow object for running REHO. It needs one input cluster size for the number of neighboring voxels to examine when measuring the regional homogeneity of the time-series. We then clone this reho workflow so that we can have a unique one for each reho named <code>'reho_%d' % num_strat</code>.</p>

<p>Maybe you like me are wondering why you can’t pass the cluster size and the name of the workflow as an argument to <code>create_reho</code>, which would eliminate those two additional lines. Not sure.</p>

<h4 id="lines-9-15">Lines 9-15</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">node</span><span class="p">,</span> <span class="n">out_file</span> <span class="o">=</span> <span class="n">strat</span><span class="o">.</span><span class="n">get_leaf_properties</span><span class="p">()</span>
</span><span class="line"><span class="n">workflow</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">out_file</span><span class="p">,</span> <span class="n">reho</span><span class="p">,</span> <span class="s">&#39;inputspec.rest_res_filt&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">node</span><span class="p">,</span> <span class="n">out_file</span> <span class="o">=</span> <span class="n">strat</span><span class="o">.</span><span class="n">get_node_from_resource_pool</span><span class="p">(</span><span class="s">&#39;functional_brain_mask&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">workflow</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">out_file</span><span class="p">,</span> <span class="n">reho</span><span class="p">,</span> <span class="s">&#39;inputspec.rest_mask&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>One key step to any derivative is it’s inputs. As I mentioned before the <code>start</code> object holds the node information for the preprocessed functional data. First, we get the filtered functional data <code>inputspec.rest_res_filt</code>. Then, we get the functional brain mask. We will extract REHO estimates from our functional data within our brain mask.</p>

<p>Now you might be wondering, what is the difference between <code>strat.get_leaf_properties()</code> vs. <code>strat.get_node_from_resource_pool('functional_brain_mask')</code>? The former (for the time series) is when one node and output name get added to the <code>start</code> object as a leaf. It appears that there is only one leaf of it’s kind and this is used specifically for functional preprocessed data. This file can be the functional data at different stages of preprocessing depending on either the stage in the pipeline or the preferences of the user. This could be the file preprocessed data, preprocessed + nuisance regression, or preprocess + nuisance regression + filtering. The latter (for the brain mask) is a bit more straightforward and simply gets the information for ‘functional_brain_mask’ in the strat object (an element in a dictionary).</p>

<h4 id="lines-20-24">Lines 20-24</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line">    <span class="n">strat</span><span class="o">.</span><span class="n">update_resource_pool</span><span class="p">({</span><span class="s">&#39;raw_reho_map&#39;</span><span class="p">:(</span><span class="n">reho</span><span class="p">,</span> <span class="s">&#39;outputspec.raw_reho_map&#39;</span><span class="p">)})</span>
</span><span class="line">    <span class="n">strat</span><span class="o">.</span><span class="n">update_resource_pool</span><span class="p">({</span><span class="s">&#39;reho_Z_img&#39;</span><span class="p">:(</span><span class="n">reho</span><span class="p">,</span> <span class="s">&#39;outputspec.z_score&#39;</span><span class="p">)})</span>
</span><span class="line">    <span class="n">strat</span><span class="o">.</span><span class="n">append_name</span><span class="p">(</span><span class="n">reho</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">create_log_node</span><span class="p">(</span><span class="n">reho</span><span class="p">,</span> <span class="s">&#39;outputspec.raw_reho_map&#39;</span><span class="p">,</span> <span class="n">num_strat</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>These functions all have to do with adding the files generated by our reho workflow into the <code>start</code> object. Specifically, we will be adding the raw reho map and the Z-score transformed reho map. The last line here is related to keeping a log of this REHO workflow by creating a new log node.</p>

<p>Also I have no idea what the <code>strat.append_name</code> is about. Will need to find out.</p>

<h4 id="lines-26-27">Lines 26-27</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line">    <span class="n">num_strat</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line"><span class="n">stops_list</span> <span class="o">+=</span> <span class="n">new_stops_list</span>
</span><span class="line"><span class="n">strat_list</span> <span class="o">+=</span> <span class="n">new_strat_list</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I’ve sort-of gone through these lines before so I’ll spare you the repetition.</p>

<h2 id="improving-this-code">Improving this code?</h2>

<p>I picked a pretty easy derivative. I mentioned some avenues of improvement. The function that generates the derivative workflow should be able to take in arguments. The <code>get_leaf_properties</code> is a little confusing and should be replaced.</p>

<p>The other avenue of improvement is the possibility that much of this is repeated in the other derivatives. You have some input functional data from the <code>strat</code> object and you need to save some output data into the <code>strat</code> object. We should be able to create an abstract <code>Derivative</code> class.</p>

<p>So we take in some inputs that are in the strat class and we give them to the reho class.</p>

<p>Below is a very rough and quick switch of this process.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Derivative</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;For adding a derivative to your workflow&quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fun</span><span class="p">,</span> <span class="n">workflow</span><span class="p">,</span> <span class="n">strat</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwrds</span><span class="p">):</span>
</span><span class="line">        <span class="nb">super</span><span class="p">(</span><span class="n">Derivative</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">workflow</span> <span class="o">=</span> <span class="n">workflow</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">strat</span> <span class="o">=</span> <span class="n">strat</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">args</span> <span class="o">=</span> <span class="n">args</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">kwrds</span> <span class="o">=</span> <span class="n">kwrds</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">deriv</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwrds</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">connect_inputs</span><span class="p">(</span><span class="o">**</span><span class="n">kwrds</span><span class="p">):</span>
</span><span class="line">        <span class="k">for</span> <span class="n">deriv_in</span><span class="p">,</span><span class="n">strat_out</span> <span class="ow">in</span> <span class="n">kwrds</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class="line">            <span class="n">node</span><span class="p">,</span><span class="n">out_file</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">strat</span><span class="o">.</span><span class="n">get_node_from_resource_pool</span><span class="p">(</span><span class="n">strat_out</span><span class="p">)</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">workflow</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">out_file</span><span class="p">,</span>
</span><span class="line">                                  <span class="bp">self</span><span class="o">.</span><span class="n">deriv</span><span class="p">,</span> <span class="s">&#39;inputspec.</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">deriv_in</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">connect_outputs</span><span class="p">(</span><span class="o">**</span><span class="n">kwrds</span><span class="p">):</span>
</span><span class="line">        <span class="k">for</span> <span class="n">strat_in</span><span class="p">,</span><span class="n">deriv_out</span> <span class="ow">in</span> <span class="n">kwrds</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class="line">            <span class="n">strat</span><span class="o">.</span><span class="n">update_resource_pool</span><span class="p">({</span><span class="n">strat_in</span><span class="p">:</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">deriv</span><span class="p">,</span> <span class="n">deriv_out</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>The exact line number (1796) will vary depending on your version. Just search ‘Inserting REHO’ and you’ll be golden.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DPARSF Quick Pack]]></title>
    <link href="http://czarrar.github.io/blog/2013/12/18/dparsf-quick-pack/"/>
    <updated>2013-12-18T17:14:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/12/18/dparsf-quick-pack</id>
    <content type="html"><![CDATA[<p>I want to first get down what files from the DPARSF preprocessed output correspond to inputs needed by CPAC for running the derivatives.</p>

<p>A big thing here is that I am running DPARSF in native space. Then on the this derivative data, I would normalize it using DARTELS. And I guess then apply smoothing using DPARSF. How to I apply smoothing with Chao-Gan’s script (emailed him to find out)?</p>

<h2 id="naming-conventions">Naming Conventions</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">A=slice timing
</span><span class="line">R=renormalization
</span><span class="line">C=covariate regressed
</span><span class="line">W=spatially normalized
</span><span class="line">S=smoothed
</span><span class="line">F=filtered
</span><span class="line">Sym=for VMH
</span><span class="line">global=GSR</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="anatomical">Anatomical</h2>

<p>I don’t need any of these since they are only for registration</p>

<h2 id="functional">Functional</h2>

<ul>
  <li>functional_brain_mask</li>
  <li>functional_nuisance_residuals</li>
  <li>functional_freq_filtered</li>
  <li></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CPAC Derivative Inputs]]></title>
    <link href="http://czarrar.github.io/blog/2013/12/17/cpac-derivative-inputs/"/>
    <updated>2013-12-17T19:24:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/12/17/cpac-derivative-inputs</id>
    <content type="html"><![CDATA[<p>I want to try to organize what inputs are needed for what derivates for CPAC. First, I have the list of template inputs for quick pack for the CCS pipeline:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">anat_suffixes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s">&quot;anatomical_brain&quot;</span><span class="p">:</span> <span class="s">&quot;mprage_sanlm.nii.gz&quot;</span><span class="p">,</span>     <span class="c"># check</span>
</span><span class="line">    <span class="s">&quot;anatomical_reorient&quot;</span><span class="p">:</span> <span class="s">&quot;reg/highres_rpi.nii.gz&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;anatomical_to_mni_nonlinear_xfm&quot;</span><span class="p">:</span> <span class="s">&quot;reg/highres2standard_warp.nii.gz&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;mni_normalized_anatomical&quot;</span><span class="p">:</span> <span class="s">&quot;reg/fnirt_highres2standard.nii.gz&quot;</span><span class="p">,</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">func_suffixes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s">&quot;preprocessed&quot;</span><span class="p">:</span> <span class="s">&quot;rest_res.nii.gz&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;mean_functional&quot;</span><span class="p">:</span> <span class="s">&quot;rest_pp_mean.nii.gz&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;functional_brain_mask&quot;</span><span class="p">:</span> <span class="s">&quot;rest_pp_mask.nii.gz&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;functional_nuisance_residuals&quot;</span><span class="p">:</span> <span class="s">&quot;rest_pp_nofilt_sm0.nii.gz&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;functional_freq_filtered&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;</span><span class="si">%(strategy)s</span><span class="s">rest_pp_</span><span class="si">%(pipeline)s</span><span class="s">_sm0.nii.gz&quot;</span><span class="p">,</span> <span class="s">&quot;</span><span class="si">%(strategy)s</span><span class="s">/rest_pp_</span><span class="si">%(pipeline)s</span><span class="s">_sm0.nii.gz&quot;</span><span class="p">],</span>
</span><span class="line">    <span class="s">&quot;functional_mni&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;</span><span class="si">%(strategy)s</span><span class="s">rest.</span><span class="si">%(pipeline)s</span><span class="s">.sm0.mni152.nii.gz&quot;</span><span class="p">,</span> <span class="s">&quot;</span><span class="si">%(strategy)s</span><span class="s">/rest.</span><span class="si">%(pipeline)s</span><span class="s">.sm0.mni152.nii.gz&quot;</span><span class="p">],</span>
</span><span class="line">    <span class="s">&quot;functional_brain_mask_to_standard&quot;</span><span class="p">:</span> <span class="s">&quot;&quot;</span> <span class="c"># I would need to make this myself</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">reg_suffixes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s">&quot;functional_to_anat_linear_xfm&quot;</span><span class="p">:</span> <span class="s">&quot;reg/example_func2highres.mat&quot;</span>
</span><span class="line"><span class="c">#    &quot;functional_to_mni_linear_xfm&quot;: &quot;functional_to_mni_linear_xfm.mat&quot;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now I go through each of the files to see if they are really needed. If not, then I will want to make sure that it is also processed as optional in my ghetto quick pack code.</p>

<h2 id="anatomicals">Anatomicals</h2>

<h3 id="anatomicalbrain">anatomical_brain</h3>

<p><strong>Yes</strong> it is needed for <strong>all the steps</strong> but <strong>only with ANTS</strong>. It is used by the applywarp sections of code and I think particularly for transforming FSL’s registration matrix to ANTs format (again i think).</p>

<h3 id="anatomicalreorient">anatomical_reorient</h3>

<p>Only <strong>VMHC?</strong>.</p>

<h3 id="anatomicaltomninonlinearxfm">anatomical_to_mni_nonlinear_xfm</h3>

<p><strong>Yes</strong> for <strong>all the steps</strong> but <strong>only for applying the registration</strong>.</p>

<h3 id="mninormalizedanatomical">mni_normalized_anatomical</h3>

<p><strong>No</strong>. This is only used in QC and so this can be removed from the set of inputs that I generate.</p>

<h2 id="functional">Functional</h2>

<h3 id="preprocessed">preprocessed</h3>

<p><strong>No</strong>. This is used in scrubbing and QC so it too can be removed from the set of inputs that I generate.</p>

<h3 id="meanfunctional">mean_functional</h3>

<p><strong>No but in VMHC</strong> it is used. Not sure how long that will last.</p>

<h3 id="functionalbrainmask">functional_brain_mask</h3>

<p><strong>Yes</strong> it is used in <strong>many (all?) steps</strong>.</p>

<h3 id="functionalnuisanceresiduals">functional_nuisance_residuals</h3>

<p><strong>Yes</strong> for <strong>ALFF and fALFF</strong>. Note that this uses the set_leaf_properties and get_leaf_properties function to dynamically get so it won’t be so obvious. This option can also be used for the other derivatives if you don’t want them to be filtered.</p>

<h3 id="functionalfreqfiltered">functional_freq_filtered</h3>

<p><strong>Yes</strong> for <strong>everything where want filtering</strong>.</p>

<h3 id="functionalmni">functional_mni</h3>

<p><strong>Yes</strong> for <strong>Spatial Regression, ROI time series, Voxel time series, Temporal Regression for SCA, Network Centrality</strong></p>

<h3 id="functionalbrainmasktostandard">functional_brain_mask_to_standard</h3>

<p><strong>Yes</strong> but <strong>only when apply registration</strong>. Although should also need it for the above ones…</p>

<h2 id="final">Final</h2>

<p>Ok so the final list, here again. Note that I didn’t discuss the reg one.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">anat_suffixes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s">&quot;anatomical_brain&quot;</span><span class="p">:</span> <span class="s">&quot;mprage_sanlm.nii.gz&quot;</span><span class="p">,</span>          <span class="c"># REGISTRATION</span>
</span><span class="line">    <span class="s">&quot;anatomical_reorient&quot;</span><span class="p">:</span> <span class="s">&quot;reg/highres_rpi.nii.gz&quot;</span><span class="p">,</span>    <span class="c"># VMHC?</span>
</span><span class="line">    <span class="s">&quot;anatomical_to_mni_nonlinear_xfm&quot;</span><span class="p">:</span> <span class="s">&quot;reg/highres2standard_warp.nii.gz&quot;</span><span class="p">,</span>  <span class="c"># REGISTRATION</span>
</span><span class="line"><span class="c">#    &quot;mni_normalized_anatomical&quot;: &quot;reg/fnirt_highres2standard.nii.gz&quot;,      # NOT NEEDED </span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">func_suffixes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line"><span class="c">#    &quot;preprocessed&quot;: &quot;rest_res.nii.gz&quot;,             # NOT NEEDED</span>
</span><span class="line"><span class="c">#    &quot;mean_functional&quot;: &quot;rest_pp_mean.nii.gz&quot;,      # VMHC?</span>
</span><span class="line">    <span class="s">&quot;functional_brain_mask&quot;</span><span class="p">:</span> <span class="s">&quot;rest_pp_mask.nii.gz&quot;</span><span class="p">,</span> <span class="c"># YES </span>
</span><span class="line">    <span class="s">&quot;functional_nuisance_residuals&quot;</span><span class="p">:</span> <span class="s">&quot;rest_pp_nofilt_sm0.nii.gz&quot;</span><span class="p">,</span>  <span class="c"># YES (although not really used)</span>
</span><span class="line">    <span class="s">&quot;functional_freq_filtered&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;</span><span class="si">%(strategy)s</span><span class="s">rest_pp_</span><span class="si">%(pipeline)s</span><span class="s">_sm0.nii.gz&quot;</span><span class="p">,</span> <span class="s">&quot;</span><span class="si">%(strategy)s</span><span class="s">/rest_pp_</span><span class="si">%(pipeline)s</span><span class="s">_sm0.nii.gz&quot;</span><span class="p">],</span>    <span class="c"># YES</span>
</span><span class="line">    <span class="s">&quot;functional_mni&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;</span><span class="si">%(strategy)s</span><span class="s">rest.</span><span class="si">%(pipeline)s</span><span class="s">.sm0.mni152.nii.gz&quot;</span><span class="p">,</span> <span class="s">&quot;</span><span class="si">%(strategy)s</span><span class="s">/rest.</span><span class="si">%(pipeline)s</span><span class="s">.sm0.mni152.nii.gz&quot;</span><span class="p">],</span>      <span class="c"># YES</span>
</span><span class="line">    <span class="s">&quot;functional_brain_mask_to_standard&quot;</span><span class="p">:</span> <span class="s">&quot;&quot;</span>                                                                                         <span class="c"># Yes</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">reg_suffixes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s">&quot;functional_to_anat_linear_xfm&quot;</span><span class="p">:</span> <span class="s">&quot;reg/example_func2highres.mat&quot;</span> <span class="c"># REGISTRATION </span>
</span><span class="line"><span class="c">#    &quot;functional_to_mni_linear_xfm&quot;: &quot;functional_to_mni_linear_xfm.mat&quot;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week 50 - Friday]]></title>
    <link href="http://czarrar.github.io/blog/2013/12/13/week-50-friday/"/>
    <updated>2013-12-13T12:01:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/12/13/week-50-friday</id>
    <content type="html"><![CDATA[<p>There’s been a bit of a lull in writing these entries. Hoping to get back on the train.</p>

<p><strong>What are the dominant issues for today?</strong></p>

<ul>
  <li>
    <p>I found that yesterday that the fast eigencentrality code doesn’t work when the inputs are normalized data (mean=0, sd=1). I am not totally sure what’s going on but I can try to use the matlab code directly to see if my python port is missing something. I might first try with random data and then with some imaging data if possible. The imaging data could be used to directly compare with the python code. I might keep these test code blocks as gists.</p>
  </li>
  <li>
    <p>I should make a table of all the processing steps that are needed for the ABIDE dataset. I want to run some of these things in the background as I can so as not to pile up.</p>
  </li>
</ul>

<h2 id="testing-fast-eigenvector-code">Testing Fast Eigenvector Code</h2>

<p>When I ran both the python and the fast code without the normalization of the time-series. I get the same results in both datasets. However, with normalization of the timeseries, I get different results. One suggestion from Steve was that there might be a difference in some normalization.</p>

<p>Details of my simplified comparison can be found on https://gist.github.com/czarrar/7950474 and at the bottom of the post.</p>

<h2 id="abide">ABIDE</h2>

<p>Let’s first make a table and workflow explaining everything. I’ll add it here first and then move it to another spot later.</p>

<p>I was able to start the processing for degree centrality with our dataset. I should be able to…</p>

<h2 id="gist">Gist</h2>

<div><script src="https://gist.github.com/7950474.js"></script>
<noscript><pre><code>import numpy as np
from CPAC.cwas.subdist import norm_cols
from fast_ecm import fast_eigenvector_centrality # this is from the other gist; can ignore this and paste in the other function

print 'Compare with non-normalized matrices'

m  = np.random.random((200,1000))
cm = m.T.dot(m)

# Let's first call a basic approach
# This actually doesn't work, not sure what I'm setting wrong
from scipy import linalg as LA
w01,v01 = LA.eigh(cm, eigvals=(0,0))
e01     = cm.dot(np.abs(v01))/w01[0]

# Let's call a second basic approach (used currently)
from scipy.sparse import linalg as sLA
w02,v02 = sLA.eigsh(cm, k=1, which='LM', maxiter=1000)
e02     = cm.dot(np.abs(v02))/w02[0]

# Finally let's call the fast eigenvector (power approach)
v03     = fast_eigenvector_centrality(m, verbose=False)

# How different are the second and third ones?
print 'mean absolute diff: ', np.abs(e02-v03).mean()
print 'correlation: ', np.corrcoef(e02.T, v03.T)[0,1]



print 'Compare with normalized matrices'

n  = norm_cols(m)
cn = n.T.dot(n)

# Let's first call a basic approach
from scipy import linalg as LA
w11,v11 = LA.eigh(cn, eigvals=(0,0))
e11     = cn.dot(np.abs(v11))/w11[0]

# Let's call a second basic approach (used currently)
from scipy.sparse import linalg as sLA
w12,v12 = sLA.eigsh(cn, k=1, which='LM', maxiter=1000)
e12     = cn.dot(np.abs(v12))/w12[0]

# Finally let's call the fast eigenvector (power approach)
v13     = fast_eigenvector_centrality(n, verbose=False)

# How different are the second and third ones?
print 'mean absolute diff: ', np.abs(e12-v13).mean()
print 'correlation: ', np.corrcoef(e12.T, v13.T)[0,1]
</code></pre></noscript></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing connectir]]></title>
    <link href="http://czarrar.github.io/blog/2013/12/10/installing-connectir/"/>
    <updated>2013-12-10T11:46:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/12/10/installing-connectir</id>
    <content type="html"><![CDATA[<p>There are several steps that appear to lend themselves to a problem with installing all the dependencies and stuff for connectir. First let me go through trying to install R with openblas, which leads to problems when using any of the parallel processing in R. </p>

<h2 id="r-with-openblas">R with OpenBlas</h2>

<p>The below links are relevant in detailing the issue/solutions between openblas and parallel processing libraries. The issue is “On Linux, OpenBLAS sets the processor affinity by default. This may cause the conflict with R parallel. You can build the library with NO_AFFINITY=1.”</p>

<ul>
  <li>http://www.stat.cmu.edu/~nmv/2013/07/09/for-faster-r-use-openblas-instead-better-than-atlas-trivial-to-switch-to-on-ubuntu/#comment-128</li>
  <li>https://stat.ethz.ch/pipermail/r-sig-hpc/2012-April/001348.html</li>
  <li>https://github.com/xianyi/OpenBLAS/wiki/faq#wiki-no_affinity</li>
</ul>

<p>Note that you can also set this on runtime with <code>export OPENBLAS_MAIN_FREE=1</code>.</p>

<p>Unfortunately on each loop of foreach I get the following error.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"> <span class="o">***</span> caught segfault <span class="o">***</span>
</span><span class="line">address <span class="mh">0x7f717d9b99d0</span><span class="p">,</span> cause <span class="s">&#39;memory not mapped&#39;</span>
</span><span class="line">
</span><span class="line">Traceback<span class="o">:</span>
</span><span class="line"> <span class="m">1</span><span class="o">:</span> mcexit<span class="p">(</span><span class="m">0L</span><span class="p">)</span>
</span><span class="line"> <span class="m">2</span><span class="o">:</span> FUN<span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">[[</span><span class="m">1L</span><span class="p">]],</span> <span class="kc">...</span><span class="p">)</span>
</span><span class="line"> <span class="m">3</span><span class="o">:</span> lapply<span class="p">(</span>seq_len<span class="p">(</span>cores<span class="p">),</span> inner.do<span class="p">)</span>
</span><span class="line"> <span class="m">4</span><span class="o">:</span> mclapply<span class="p">(</span>argsList<span class="p">,</span> FUN<span class="p">,</span> mc.preschedule <span class="o">=</span> preschedule<span class="p">,</span> mc.set.seed <span class="o">=</span> set.seed<span class="p">,</span>     mc.silent <span class="o">=</span> silent<span class="p">,</span> mc.cores <span class="o">=</span> cores<span class="p">)</span>
</span><span class="line"> <span class="m">5</span><span class="o">:</span> e<span class="o">$</span>fun<span class="p">(</span>obj<span class="p">,</span> substitute<span class="p">(</span>ex<span class="p">),</span> parent.frame<span class="p">(),</span> e<span class="o">$</span>data<span class="p">)</span>
</span><span class="line"> <span class="m">6</span><span class="o">:</span> foreach<span class="p">(</span>i <span class="o">=</span> <span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">)</span> <span class="o">%dopar%</span> rnorm<span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I will need to come back to this error in this future for fixing.</p>

<h2 id="test-smoothing">Test Smoothing</h2>

<p>I created the following setup to test 2 subjects with the new smoothing of standard functionals.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">cd <span class="o">/</span>home2<span class="o">/</span>data<span class="o">/</span>Projects<span class="o">/</span>CPAC_Regression_Test
</span><span class="line">mkdir smooth_tests
</span><span class="line"><span class="c1"># cwas branch of CPAC</span>
</span><span class="line">cd smooth_tests
</span><span class="line">git clone https<span class="o">://</span>github.com<span class="o">/</span>FCP<span class="o">-</span>INDI<span class="o">/</span>C<span class="o">-</span>PAC.git
</span><span class="line">cd C<span class="o">-</span>PAC
</span><span class="line">git checkout cwas
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I also copied over the following config files and edited them:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span> /home2/data/Projects/CPAC_Regression_Test
</span><span class="line"><span class="c"># only use 2 subjects</span>
</span><span class="line">cp 2013-12-05_v-0-3-3/run/CPAC_subject_list.yml smooth_tests/
</span><span class="line"><span class="c"># remove any derivatives from being run</span>
</span><span class="line">cp 2013-12-05_v-0-3-3/run/pipeline_config_regtest.yml smooth_tests/
</span><span class="line"><span class="c"># </span>
</span><span class="line">cp 2013-12-05_v-0-3-3/run/run-CPAC_v-0-3-3.py smooth_tests/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Errors:
- invalid connection
- unknown func_preproc_0</p>

<p>I fixed the above but then got some error with just running the pipeline.</p>

<p>spent 3 hrs.</p>

<h2 id="maarten-brain-sizes">Maarten Brain Sizes</h2>

<p>Maarten received the results for NKI-RS and NK-RS enhanced fine but was missing one file (missing the ac-pc-fov.txt file for all subjects). In addition, he wanted to have results for the COBRA subjects. I got the path for this from Dan and should be easy to run the script on these participants.</p>

<h3 id="fixing-missing-file">Fixing missing file</h3>

<p>The file in question is <code>ac-pc-fov.txt</code> and is returned by the <code>DOfovC.sh</code> script. Below is the command that I ran for testing.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">.<span class="o">/</span>get_brain_size.py <span class="o">-</span>inputfile <span class="o">/</span>home2<span class="o">/</span>data<span class="o">/</span>Projects<span class="o">/</span>brain_sizes<span class="o">/</span><span class="m">10</span>_rockland_pilot<span class="o">/</span>anat_test.txt <span class="o">-</span>tempdir <span class="o">/</span>home2<span class="o">/</span>data<span class="o">/</span>Projects<span class="o">/</span>brain_sizes<span class="o">/</span><span class="m">10</span>_rockland_pilot<span class="o">/</span>test <span class="o">-</span>scriptdir <span class="o">$</span><span class="p">(</span>pwd<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It seems that some loop was being skipped and other files weren’t being generated, which led to the error. I did some other funnies to investigate and fix the issue such as convert the <code>DOfovC.sh</code> script to be bash.</p>

<h3 id="re-running">Re-Running</h3>

<p>I need to re-run two studies and run one for the first time. Run the following on gelert.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="c1"># Rockland Pilot</span>
</span><span class="line">.<span class="o">/</span>get_brain_size.py <span class="o">-</span>inputfile <span class="o">/</span>home2<span class="o">/</span>data<span class="o">/</span>Projects<span class="o">/</span>brain_sizes<span class="o">/</span><span class="m">10</span>_rockland_pilot<span class="o">/</span>anat_demographics.txt <span class="o">-</span>tempdir <span class="o">/</span>home2<span class="o">/</span>data<span class="o">/</span>Projects<span class="o">/</span>brain_sizes<span class="o">/</span><span class="m">10</span>_rockland_pilot<span class="o">/</span>results <span class="o">-</span>scriptdir <span class="o">$</span><span class="p">(</span>pwd<span class="p">)</span>
</span><span class="line"><span class="c1"># Rockland Enhanced</span>
</span><span class="line">.<span class="o">/</span>get_brain_size.py <span class="o">-</span>inputfile <span class="o">/</span>home2<span class="o">/</span>data<span class="o">/</span>Projects<span class="o">/</span>brain_sizes<span class="o">/</span><span class="m">20</span>_rockland_enhanced<span class="o">/</span>anat_demographics.txt <span class="o">-</span>tempdir <span class="o">/</span>home2<span class="o">/</span>data<span class="o">/</span>Projects<span class="o">/</span>brain_sizes<span class="o">/</span><span class="m">20</span>_rockland_enhanced<span class="o">/</span>results <span class="o">-</span>scriptdir <span class="o">$</span><span class="p">(</span>pwd<span class="p">)</span>
</span><span class="line"><span class="c1"># COBRA</span>
</span><span class="line">.<span class="o">/</span>get_brain_size.py <span class="o">-</span>inputfile <span class="o">/</span>home2<span class="o">/</span>data<span class="o">/</span>Projects<span class="o">/</span>brain_sizes<span class="o">/</span><span class="m">30</span>_cobra<span class="o">/</span>anat_demographics.txt <span class="o">-</span>tempdir <span class="o">/</span>home2<span class="o">/</span>data<span class="o">/</span>Projects<span class="o">/</span>brain_sizes<span class="o">/</span><span class="m">30</span>_cobra<span class="o">/</span>results <span class="o">-</span>scriptdir <span class="o">$</span><span class="p">(</span>pwd<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week 50 - Monday]]></title>
    <link href="http://czarrar.github.io/blog/2013/12/09/week-50-monday/"/>
    <updated>2013-12-09T20:03:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/12/09/week-50-monday</id>
    <content type="html"><![CDATA[<h2 id="plansummary">Plan/Summary</h2>

<ul>
  <li>[x] Email Maarten with the results</li>
  <li>[x] Add running Xinian’s filtering script to my Basecamp TODO</li>
  <li>[x] Integrate updated CWAS code into master CPAC branch</li>
  <li>[] Tagging (e 1 hr)</li>
  <li>[] QC (e 1 hr)</li>
  <li>[] Finish fast eigenvector centrality code (not workflow)</li>
</ul>

<p>While above were items that I had planned in the morning, items below reflect additions to this plan during the day.</p>

<ul>
  <li>[x] cleaned up the code to use regression test data to run a python CPAC and R version of CWAS.</li>
  <li>[x] wrote code to smooth 4D functional data in standard space</li>
  <li>[x] write code to use smoothed data for CWAS</li>
  <li>[x] write some additional code to use internal CPAC filepaths for CWAS</li>
  <li>[x] write code to parse group analysis model inputs for CWAS</li>
</ul>

<p>The coding for CWAS in CPAC went surprisingly well. Hopefully, this streak might continue tomorrow when testing.</p>

<h2 id="integrating-cwas-code-with-cpac">Integrating CWAS Code with CPAC</h2>

<p>My issue in using the main CPAC repository was that although I was a member, I needed to be made an owner. After figuring this out, I created a ‘cwas’ branch and added the relevant changes to the cwas folder.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CWAS Simulations]]></title>
    <link href="http://czarrar.github.io/blog/2013/12/07/cwas-simulations/"/>
    <updated>2013-12-07T16:39:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/12/07/cwas-simulations</id>
    <content type="html"><![CDATA[<p>It seems that my previous set of simulations may go down the drain as they weren’t relevant to the reviewer’s concern.</p>

<p>So now, I am looking into a new set of simulations focused on examining properties of the MDMR approach using resting-state functional connectivity data.</p>

<h2 id="methods">Methods</h2>

<p>One question is how can we implement our simulations. Here are the general steps:</p>

<ol>
  <li>
    <p>Compute 1000 voxelwise connectivity maps at 4mm isotropic for all my 104 participants.</p>
  </li>
  <li>
    <p>Using GLM remove the effects of other variables to get residual connectivity maps</p>
  </li>
  <li>
    <p>Add in group effect and vary certain factors</p>
  </li>
</ol>

<p>Step three is crucial and is discussed later.</p>

<h3 id="factors">Factors</h3>

<p>What are the factors that we want to measure?</p>

<ul>
  <li>Number of ‘clusters’ that differ</li>
  <li>Extent of each ‘cluster’ that differ</li>
  <li>Effect size</li>
</ul>

<p>Another set of factors that could be examined is the variation in the effect size across the connectivity map. For now, I guess we shall assume a constant difference with some random noise.</p>

<p>Do we really need to be examining some of these steps? I’m thinking that we just focus on the effect size and simply generate a gaussian random field </p>

<h3 id="implementation">Implementation</h3>

<p>I’m assuming that I have a matrix with each participant’s connectivity map at one voxel. </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week 49 - Friday]]></title>
    <link href="http://czarrar.github.io/blog/2013/12/06/week-49-friday/"/>
    <updated>2013-12-06T10:35:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/12/06/week-49-friday</id>
    <content type="html"><![CDATA[<h2 id="plan">Plan</h2>

<ul>
  <li>ABIDE
    <ul>
      <li>[] QC (1 hour)</li>
    </ul>
  </li>
  <li>CPAC
    <ul>
      <li>[] Finish adapting fast eigenvector code (30 mins)</li>
      <li>[] Write SVD version of eigenvector (1 hour)</li>
      <li>[] Test new eigenvector code (2 hours)</li>
      <li>[] @Steve CWAS Regression Test (1 hour)</li>
    </ul>
  </li>
  <li>Tagging
    <ul>
      <li>[] Meeting to discuss criteria (1 hour)</li>
    </ul>
  </li>
</ul>

<p>Look into SVD (20 mins). But it’s slower.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">numpy.linalg</span> <span class="kn">import</span> <span class="n">svd</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">scipy.sparse.linalg</span> <span class="kn">import</span> <span class="n">eigsh</span>
</span><span class="line"><span class="n">mat</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">((</span><span class="mi">100</span><span class="p">,</span><span class="mi">1000</span><span class="p">))</span>
</span><span class="line"><span class="o">%</span><span class="n">timeit</span> <span class="n">u</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">v</span> <span class="o">=</span> <span class="n">svd</span><span class="p">(</span><span class="n">mat</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class="line"><span class="o">%</span><span class="n">timeit</span> <span class="n">evalue</span><span class="p">,</span> <span class="n">evector</span> <span class="o">=</span> <span class="n">eigsh</span><span class="p">(</span><span class="n">mat</span><span class="o">.</span><span class="n">T</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">mat</span><span class="p">),</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">which</span><span class="o">=</span><span class="s">&#39;LM&#39;</span><span class="p">,</span> <span class="n">maxiter</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In this case the current approach took 45.2ms and the SVD approach took 135ms.</p>

<h2 id="fast-eigenvector-centrality">Fast Eigenvector Centrality</h2>

<p>The plan for testing would be to first make sure that the code results are close to the original approach and possibly also compare to an SVD approach.</p>

<h2 id="brain-size-ala-maarten">Brain Size ala Maarten</h2>

<p>We ended up dropping the ball in getting Maarten some of these scripts.</p>

<p>I need to create an input file with <code>T1file,age,sex</code>. If I am using the NKI Rockland pilot dataset, then I believe I should be able to find the relevant path. For the most recent data, there have been additions so let me confirm that I have access to everything. Ok so first, pilot dataset.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">rawdir    <span class="o">&lt;-</span> <span class="s">&#39;/home2/data/Originals/Rockland/raw&#39;</span>
</span><span class="line">phenofile <span class="o">&lt;-</span> <span class="s">&#39;/home2/data/Originals/Rockland/NKI.1-39_phenotypic.csv&#39;</span>
</span><span class="line">
</span><span class="line">pheno     <span class="o">&lt;-</span> read.csv<span class="p">(</span>phenofile<span class="p">)</span>
</span><span class="line">df        <span class="o">&lt;-</span> pheno<span class="p">[,</span>c<span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">12</span><span class="p">)]</span>
</span><span class="line">df<span class="o">$</span>paths  <span class="o">&lt;-</span> file.path<span class="p">(</span>rawdir<span class="p">,</span> df<span class="o">$</span>Subject<span class="p">,</span> <span class="s">&quot;touse&quot;</span><span class="p">,</span> <span class="s">&quot;anat&quot;</span><span class="p">,</span> <span class="s">&quot;mprage.nii.gz&quot;</span><span class="p">)</span>
</span><span class="line">df<span class="o">$</span>exists <span class="o">&lt;-</span> file.exists<span class="p">(</span>df<span class="o">$</span>paths<span class="p">)</span><span class="o">*</span><span class="m">1</span>
</span><span class="line">
</span><span class="line">df.txt <span class="o">&lt;-</span> df<span class="p">[</span>df<span class="o">$</span>exists<span class="o">==</span><span class="m">1</span><span class="p">,</span>c<span class="p">(</span><span class="m">4</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">2</span><span class="p">)]</span>
</span><span class="line">write.table<span class="p">(</span>df.txt<span class="p">,</span> file<span class="o">=</span><span class="s">&quot;rockland_pilot.txt&quot;</span><span class="p">,</span> row.names<span class="o">=</span><span class="k-Variable">F</span><span class="p">,</span> col.names<span class="o">=</span><span class="k-Variable">F</span><span class="p">,</span> quote<span class="o">=</span><span class="k-Variable">F</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I want to now look at the Enhanced dataset.</p>

<h2 id="thoughts">Thoughts</h2>

<h3 id="plan-better">Plan Better</h3>

<p>Last few days I feel that I haven’t gotten through as much as I could have. Possibly due to not sleeping as much and partly due to more socializing like with the speaker’s visit and a new office mate. Let’s try differently today.</p>

<h3 id="link-to-pages-by-week-and-month">Link to pages by week and month</h3>

<p>Another nice thing would be to have a summary page at the end of the week with links to all the other pages that week (might want to check if those exist?) and similarly at the end of the month could have a page with the lists for that month. I wonder if this could be within the pages section?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week 49 - Thursday]]></title>
    <link href="http://czarrar.github.io/blog/2013/12/05/week-49-thursday/"/>
    <updated>2013-12-05T11:48:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/12/05/week-49-thursday</id>
    <content type="html"><![CDATA[<ul>
  <li>ABIDE
    <ul>
      <li>[x] QC (1 hour)</li>
    </ul>
  </li>
  <li>Fast Eigenvector Centrality
    <ul>
      <li>[x] Tried installing the C++ version (2 hrs)</li>
    </ul>
  </li>
  <li>Tagging</li>
</ul>

<h2 id="abide">ABIDE</h2>

<p>I am still waiting on Xinian to get back to me about his global signal regressed data (getting filtered vs non-filtered data).</p>

<p>I want to also get some QC done today.</p>

<h2 id="cpac">CPAC</h2>

<h3 id="fecm">fECM</h3>

<p>I was tried to install the fast eigenvector centrality code but had problems with importing all the C++11 headers on my mac. It wasn’t totally clear what was wrong to me except that the mac doesn’t really ship with the latest gear. So I contacted Stan to install a very recent version of gcc on rocky and I tried to install the latest version of gcc on my computer through home-brew. Still waiting on the first option and for the second, after some work, I was able to start the following command <code>brew install --enable-cxx --enable-fortran gcc49</code>. This failure is a little disappointing because it seems so simple but I’ve now hung up my towel for the moment and going to focus on my other tasks.</p>

<h2 id="tagging">Tagging</h2>

<p>I really want to get at least one hour of tagging into the mix here.</p>

<h2 id="general">General</h2>

<p>I emailed Dan Dickstein suggesting to use the R version of CWAS for now and pointed him to an install script that I have on github.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week 49 - Wednesday]]></title>
    <link href="http://czarrar.github.io/blog/2013/12/04/week-49-wednesday/"/>
    <updated>2013-12-04T10:02:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/12/04/week-49-wednesday</id>
    <content type="html"><![CDATA[<h2 id="summarytodo">Summary/TODO</h2>

<ul>
  <li>ABIDE
    <ul>
      <li>[x] QC (1 hour)</li>
    </ul>
  </li>
  <li>CPAC (related to ABIDE)
    <ul>
      <li>[] Functional Density Mapping</li>
      <li>[] Fast Eigenvector Centrality
        <ul>
          <li>[x] Respond to Wink</li>
          <li>[x] Tried installing the C++ version (1 hr)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>[] Tagging</li>
  <li>Dan Dickstein CWAS
    <ul>
      <li>[x] Get details from Dan</li>
      <li>[x] Phil Meeting about CWAS Paper. Discussed way to get confidence intervals for simulation power analysis. (1 hr)</li>
    </ul>
  </li>
  <li>CWAS with Steve. Worked out a plan to have a workable version of CWAS into the next release (30 min)</li>
  <li>Went to talk with Matt Hutchinson. Asked a super intelligent question. (1-2 hrs)</li>
</ul>

<h2 id="abide-qc">ABIDE QC</h2>

<p>Start at 10am till 11am.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week 49 - Tuesday]]></title>
    <link href="http://czarrar.github.io/blog/2013/12/03/week-49-tuesday/"/>
    <updated>2013-12-03T11:30:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/12/03/week-49-tuesday</id>
    <content type="html"><![CDATA[<p>testing draft</p>

<h2 id="summarytodo">Summary/TODO</h2>

<ul>
  <li>ABIDE
    <ul>
      <li>[x] Create quick pack for degree centrality</li>
      <li>[x] Email Xinian about GSR data and having filtered/non-filtered</li>
      <li>[x] Finish creating quick pack for LFCD</li>
    </ul>
  </li>
  <li>CPAC
    <ul>
      <li>[] Run an initial test of the functional node</li>
    </ul>
  </li>
  <li>Tag</li>
</ul>

<p>I also took the speaker (Matt) out to lunch with Zhen, and then showed him some of my slides about CWAS.</p>

<h2 id="quick-pack-for-centrality">Quick Pack for Centrality</h2>

<h3 id="cpac-preprocessed-data">CPAC Preprocessed Data</h3>

<p>The scripts for this analysis are located in <code>/data/Projects/ABIDE_Initiative/CPAC/abide/config/30_centrality</code>. I was able to first generate a subject list YAML file with <code>10_gen_quick_pack.py</code>. Below is a sample of what a file for one subject looks like:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  functional_brain_mask: {filt_global: /home2/data/Projects/ABIDE_Initiative/CPAC/Output_2013-11-22/pipeline_MerrittIsland/0050642_session_1/functional_brain_mask/_scan_rest_1_rest/rest_3dc_tshift_RPI_3dv_automask.nii.gz,
</span><span class="line">    filt_noglobal: /home2/data/Projects/ABIDE_Initiative/CPAC/Output_2013-11-22/pipeline_MerrittIsland/0050642_session_1/functional_brain_mask/_scan_rest_1_rest/rest_3dc_tshift_RPI_3dv_automask.nii.gz,
</span><span class="line">    nofilt_global: /home2/data/Projects/ABIDE_Initiative/CPAC/Output_2013-11-22/pipeline_MerrittIsland/0050642_session_1/functional_brain_mask/_scan_rest_1_rest/rest_3dc_tshift_RPI_3dv_automask.nii.gz,
</span><span class="line">    nofilt_noglobal: /home2/data/Projects/ABIDE_Initiative/CPAC/Output_2013-11-22/pipeline_MerrittIsland/0050642_session_1/functional_brain_mask/_scan_rest_1_rest/rest_3dc_tshift_RPI_3dv_automask.nii.gz}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We can see that we have each filtering and global option as the input. This is a little bit of cheating since the different input keys are interpreted as different scans.</p>

<p>We can then use these different inputs in one CPAC run with <code>20_run_gen_quick_pack.py</code>. This script is currently running and the output/working directories can be found in <code>/data/Projects/ABIDE_Initiative/Derivatives/CPAC/Cent</code>.</p>

<h2 id="eigenvector-centrality">Eigenvector Centrality</h2>

<p>I emailed out to the author of the fast implementation paper to ask for his C++ code. However, if the author does not respond, the paper is fairly descriptive and I imagine it would be possible to write our own code based on the methods description.</p>

<h2 id="qc">QC</h2>

<p>I created the new excel file and looked through one subject. Should confirm the following: should have columns for anat, func, and reg with comments for each of those, and a final status column and final comments column. Do I need anything for the segmentations?</p>

<h2 id="functional-density-mapping">Functional Density Mapping</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week 49 - Monday]]></title>
    <link href="http://czarrar.github.io/blog/2013/12/02/week-49-monday/"/>
    <updated>2013-12-02T13:25:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/12/02/week-49-monday</id>
    <content type="html"><![CDATA[<h2 id="summary">Summary</h2>

<ul>
  <li>Checked and finalized fixing a subject.</li>
  <li>Resolved questions with QC</li>
  <li>Discussed issue with VMHC</li>
  <li>Setup quick pack for Xinian’s dataset</li>
  <li>Read through the eigenvector centrality paper</li>
  <li>Went through a few articles for tagging with updated instructions</li>
</ul>

<h2 id="todos">TODOs</h2>

<ul>
  <li>ABIDE
    <ul>
      <li>Check on fixed subject</li>
      <li>Email about QC</li>
      <li>Look into VMHC issue on github</li>
      <li>Create quick packs for everyone</li>
      <li>Email to ask about eigenvector centrality</li>
    </ul>
  </li>
  <li>Check fixed subject</li>
  <li>Find out about tagging</li>
</ul>

<h2 id="abide---fixed-subject">ABIDE - Fixed Subject</h2>

<p>I reran one participant with missing derivatives. It appears that everything is good.</p>

<h2 id="abide---quick-packs">ABIDE - Quick Packs</h2>

<p>We are looking to have the following derivatives:</p>

<ul>
  <li>Timeseries for different regions of interest</li>
  <li>Dual Regression maps</li>
  <li>ALFF/fALFF</li>
  <li>REHO</li>
  <li>Degree/Eigen Centrality</li>
  <li>VMHC</li>
</ul>

<h3 id="cameron">Cameron</h3>

<p>For our data, we already have most of the above derivatives and need the following:</p>

<ul>
  <li>Degree/Eigen Centrality</li>
  <li>VMHC</li>
</ul>

<p>Degree I should be able to run now but need to wait on Eigen and VMHC.</p>

<h3 id="xinian">Xinian</h3>

<p>I started to create the quick pack for this dataset. The one issue is that it’s unclear whether the global signal correction was applied to either the filtered or non-filtered data. It should be applied to both so will need to contact some people in order to figure out how to resolve this issue. Hopefully no heads will roll.</p>

<p>The scripts and what not for this dataset quick pack are located in <code>/data/Projects/ABIDE_Initiative/CPAC/abide/config/32_xinian</code>. I still need to write some code to generate the standard brain mask and of course test it all as well.</p>

<h3 id="pierre">Pierre</h3>

<p>Pierre’s is already in standard space so I believe I should simply be able to turn off <code>runRegisterFuncToMNI</code> and also my custom option <code>applyRegisterFuncToMNI</code>. The regular outputs should be good enough.</p>

<h3 id="chao-gan">Chao-Gan</h3>

<p>Check with Chao-Gan.</p>

<h2 id="abide---qc">ABIDE - QC</h2>

<p>I should do a similar approach as Yang and reference an email from Pierre with some guidelines.</p>

<h2 id="eigenvector-centrality">Eigenvector Centrality</h2>

<p>I did a bit of reading last time about a faster approach to eigenvector centrality. Now I went through the main paper again. It appears that their speed-up is primarily by not having to compute the cross product between a matrix of time series (voxels x time points). They split this step up into two parts that reduces the complexity from N^2 to 2NT where N = voxels and T = time points. They make a claim that for voxelwise data, they see a speedup of 1000x.</p>

<h2 id="tagging">Tagging</h2>

<p>Spoke to Cameron. We discussed some potential changes and I emailed these out to him and Matt.</p>

<p>In terms of tagging, here were some important points to note:</p>

<ul>
  <li>use mike’s opinions as the standard</li>
  <li>basic neuroscience is a superset of brain/behavior</li>
  <li>only include resting-state fMRI studies!</li>
</ul>

<h2 id="cwas">CWAS</h2>

<p>I got emails from Xavier and Phil with comments. I should look to integrate them.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CWAS Simulations]]></title>
    <link href="http://czarrar.github.io/blog/2013/12/01/cwas-simulations/"/>
    <updated>2013-12-01T21:01:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/12/01/cwas-simulations</id>
    <content type="html"><![CDATA[<p>I should check the data that I am plotted. Right now, I am examining the mean -log10p value of the MDMR results but I think I might want to look at the percent of significant results with each effect size. Should double check.</p>

<p>The code for the simulation analysis is located in <code>/home/data/Projects/CWAS/share/simulations</code>. I have added multiprocessing functionality to speed up the ability to go through the different parameters and iterations.</p>

<p>I have started running one iteration of things including both variables of interest. Holy crap, it finished in like 30mins, super quick. I saved the values in an rda file within the same folder. The contents of that rda are as follows:</p>

<ul>
  <li>logp.cov1</li>
  <li>fstat.cov1</li>
  <li>logp.cov0</li>
  <li>fstat.cov0</li>
</ul>

<p>The <code>cov1</code> term means that the covariate was modeled whereas <code>cov0</code> means the covariate wasn’t modeled. For <code>cov1</code> matrices, the dimensions were 2 terms x 11 group difference x 11 correlation. For <code>cov0</code> matrices, the dimensions were 11 group difference x 11 correlation (only for the group difference term). The correlation was between the age covariate and the response.</p>

<h2 id="plot">Plot</h2>

<p>I generated plots of the results on my computer using the <code>.../pro42/scripts2add/simulations/20_plot.R</code> script. Since I used Rnotebook, I was able to publish those results online at http://rpubs.com/czarrar/cwas_simulations.</p>

<h2 id="status">Status</h2>

<p>So I had to rerun the analyses since I should have been calculating power as percent of significant iterations (p &lt; 05). I upped the number of iterations to 20, hopefully this is enough.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week 49 - Sunday]]></title>
    <link href="http://czarrar.github.io/blog/2013/11/30/week-49-sunday/"/>
    <updated>2013-11-30T21:47:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/11/30/week-49-sunday</id>
    <content type="html"><![CDATA[<p>This is a bit of a cheat since I started this on Saturday (week 48).</p>

<h2 id="todo">TODO</h2>

<p>I’m trying to use the workflow for this.</p>

<h2 id="comparing-distances">Comparing Distances</h2>

<p>I was able to finish making the figure as well as the text for the paper. I added all this information to the response letter.</p>

<h2 id="simulations">Simulations</h2>

<p>I ran this and need to double check. However, I do think that something went wrong here. I need to double check the code and spot check the effect sizes given. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plotting Images in R]]></title>
    <link href="http://czarrar.github.io/blog/2013/11/30/plotting-images-in-r/"/>
    <updated>2013-11-30T19:37:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/11/30/plotting-images-in-r</id>
    <content type="html"><![CDATA[<p>Plotting images or 2D graphs are fairly easy in R. You can use the <code>image</code> function or for a nice legend, you can also use the <code>image.plot</code> function in the <code>fields</code> package. The issue I encountered for the <code>image.plot</code> function is when I want the labels from my x and y axis to be different due to a log transformation. This was not possible.</p>

<p>To get around this issue, I adapted the <code>image.plot</code> function as <code>image.zplot</code> and added the following lines that are run right after the image is generated.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="kr">if</span> <span class="p">(</span><span class="o">!</span>is.null<span class="p">(</span>axis.x<span class="p">))</span> <span class="p">{</span>
</span><span class="line">  axis.x<span class="o">$</span>side <span class="o">&lt;-</span> <span class="m">1</span>
</span><span class="line">  do.call<span class="p">(</span><span class="s">&quot;axis&quot;</span><span class="p">,</span> axis.x<span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kr">if</span> <span class="p">(</span><span class="o">!</span>is.null<span class="p">(</span>axis.y<span class="p">))</span> <span class="p">{</span>
</span><span class="line">  axis.y<span class="o">$</span>side <span class="o">&lt;-</span> <span class="m">2</span>
</span><span class="line">  do.call<span class="p">(</span><span class="s">&quot;axis&quot;</span><span class="p">,</span> axis.y<span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">box<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This also adds the <code>axis.x</code> and <code>axis.y</code> options, which are options with list as the argument. The list entries are the key/value pairs when calling the particular axis function. This means I can use my custom log transformed x and y axis but provide the original numbers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wednesday - Week 48]]></title>
    <link href="http://czarrar.github.io/blog/2013/11/27/wednesday-week-48/"/>
    <updated>2013-11-27T11:42:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/11/27/wednesday-week-48</id>
    <content type="html"><![CDATA[<h2 id="summary">Summary</h2>

<p>I was able to get through at least at a partial level through the items in my TOOD list below. More details are of course below.</p>

<ul>
  <li>I checked the CPAC output and found that 1 subject had some missing preprocessing data due to a crash during nuisance. I am rerunning this subject on rocky so I can examine the working directory (it said a tissue prior was missing in the error). Everything else is good. It should be noted that there are 2 participants in OHSU that are missing the 1st scan but have 2 other scans.</li>
  <li>I reran the QC and the output pages now seem good. Need to decide the procedure for QC now.</li>
  <li>Looked into eigenvector centrality speedup. There is code to do the power iteration approach that is advocated in the Brain Connectivity paper with 1000x speedup in a fast eigenvector centrality approach. Could also email the people from that paper to ask for their code.</li>
  <li>Discussed updating VMHC to have Cameron’s fixes (register regular MNI brain to symmetric MNI brain) with Steve. Also, discussed having the registration step be done in the assigned standard anatomical resolution and then apply the warp from this registration to the native functional image into the assigned standard functional resolution. This is not currently done.</li>
  <li>Did tagging for about 30 minutes.</li>
  <li>Created TODO items for ABIDE.</li>
</ul>

<h2 id="plans">Plans</h2>

<ul>
  <li>ABIDE
    <ul>
      <li>Create TODOs</li>
      <li>Finish checking CPAC output</li>
      <li>Fix QC pages</li>
      <li>Look into fixing VMHC error when running at 3mm</li>
      <li>Look into eigenvector centrality</li>
      <li>Create quick packs for CPAC and Xinian</li>
    </ul>
  </li>
  <li>Do 1 hour of tagging</li>
</ul>

<h2 id="abide---todo">ABIDE - TODO</h2>

<p>This is a partial list and the next time I will need to make a more thorough list.</p>

<ul>
  <li>Do QC</li>
  <li>Check all outputs there for Pierre, Xinian, Chao-Gan</li>
  <li>Optimize the eigenvector centrality</li>
  <li>Make sure VMHC works properly when using 3mm output resolution</li>
  <li>Setup Quick Packs</li>
  <li>Run Quick Packs</li>
</ul>

<h2 id="abide---check-outputs">ABIDE - Check Outputs</h2>

<p>I made a script <code>20_check_subjects.R</code> in <code>.../config/24_check</code> that checks which subject is missing some preprocessing output given that the raw data exists.</p>

<p>For two subjects, we are missing the first rest scan. These subjects are from OHSU and are <code>0050155</code> and <code>0050165</code>.</p>

<p>We need to redo <code>0051275</code> since there was a failure in calculating the nuisance regression. I ran this subject again on rocky with the relevant info/scripts in <code>/data/Projects/ABIDE_Initiative/CPAC/abide/config/26_reprocess_3mm</code>.</p>

<h2 id="abide---qc">ABIDE - QC</h2>

<p>Simply rerunning the QC resolved some broken links and the QC pages appear fine. Need to set some system of getting through all these QC pages and confirm the protocol for checking.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">CPAC</span>
</span><span class="line"><span class="n">CPAC</span><span class="o">.</span><span class="n">utils</span><span class="o">.</span><span class="n">create_all_qc</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="s">&#39;/path/to/output_directory&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="vmhc">VMHC</h2>

<p>Currently there is a bit of an issue when we try to run VMHC at 3mm. Although it now works, the registration appears to to be done at that resolution (3mm). Talking to Steve, it seems a fix proposed by Cameron would resolve my issue as well. That is, the registration between the regular MNI to the symmetric MNI would be done in the anatomical resolution, which is usually specified at 1mm. Then, this warp would be combined with the previous one to standard space, and we would apply this warp to the functional in order to get to the specified standard functional space, which is in 3mm.</p>

<h2 id="eigen-vector-centrality">Eigen-Vector Centrality</h2>

<p>I did a brief search of faster implementations of eigenvector centrality, which is also sometimes referred to as google’s page rank.</p>

<h3 id="paper-with-fast-implementation">Paper with Fast Implementation</h3>

<p>The most relevant item is a paper recommended by Cameron: http://online.liebertpub.com.ezproxy.med.nyu.edu/doi/full/10.1089/brain.2012.0087. It appears their analyses were done in matlab so if we could also get their code, it would be fairly easy to integrate with CPAC. Below is a quote from the paper that indicates this approach is very fast, potentially faster than degree centrality! Note that they used a voxel size of 2mm.</p>

<blockquote>
  <p>The RS-fMRI data of each subject contain 195,704 in-brain voxels per volume and the time-series length is 200. The approximate gain in efficiency compared to the standard algorithm is a factor 1000. The computation times for ECM of the fMRI (excluding file I/O) are 39 sec on average (std. dev. 14 sec) on an Intel Xeon.</p>
</blockquote>

<p>So figure out if we should contact them or not?</p>

<h3 id="related-links">Related Links</h3>

<p>The above paper used the power iteration method to calculate the dominant eigenvector. I found various links on the code to run this power iteration method.</p>

<ul>
  <li>Some slides with well explained code. http://homepages.math.uic.edu/~jan/mcs507/numpyveclinalg.pdf</li>
  <li>Easy to follow function although needs to be fixed: https://github.com/seckcoder/mmd/blob/9aba8a224c69daebc6f3f800e3847362911f2225/dimension_reduction.py</li>
  <li>Super straightforward code: http://stackoverflow.com/questions/13739186/compute-eigenvector-using-a-dominant-eigenvalue</li>
  <li>4 ways to compute: http://glowingpython.blogspot.com/2011/05/four-ways-to-compute-google-pagerank.html</li>
</ul>

<h2 id="tagging">Tagging</h2>

<p>I think I should go through and check the first 45 that I did. I believe that I may not have properly added the type of connectivity (seed-based, unsupervised, etc) properly.</p>

<p>Sent out an email with some issues/guidance on tagging.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tuesday - Week 48]]></title>
    <link href="http://czarrar.github.io/blog/2013/11/26/tuesday-week-48/"/>
    <updated>2013-11-26T10:41:00-05:00</updated>
    <id>http://czarrar.github.io/blog/2013/11/26/tuesday-week-48</id>
    <content type="html"><![CDATA[<h2 id="summary">Summary</h2>

<p>I was able to get through a fair amount of what I planned (next section). Here is what I did do:</p>

<ul>
  <li>Finished updating centrality code to be memory efficient</li>
  <li>Created a command-line tool to run said centrality code</li>
  <li>Ran memory test on final centrality code. The memory limit that a user sets is roughly (within 50MB) the amount that is actually used.</li>
  <li>Found path to Yang’s QC report for ABIDE</li>
  <li>Finished writing script to check what CPAC outputs exist. Most of the data appear to have been written with only a few missing data.</li>
</ul>

<h2 id="plans">Plans</h2>

<ul>
  <li>Do final memory test for centrality code</li>
  <li>Create command-line centrality wrapper</li>
  <li>Finish 10mins (from yesterday) for CMI librarian tagging</li>
  <li>Find Yang’s old QCing and related PDF</li>
  <li>Get details on ABIDE preprocessing output (what completed and what didn’t)</li>
  <li>Start creating quick packs for different strategies (CPAC, Pierre, Xinian, and Chao-Gan).</li>
</ul>

<h3 id="questions">Questions</h3>

<ul>
  <li>How will quick pack work for Pierre’s data? Do we provide the identity matrix?</li>
</ul>

<h2 id="abide-processing-output">ABIDE Processing Output</h2>

<p>One thing to check is if all scans have been preprocessed (i.e., if a subject has 3 scans as is the case with OHSU). I could check to see what other’s have done. Hmm not a bad idea. First find subjects with more than one scan and then see what happens with these subjects. Yes, the OHSU data has more than 1 scan per participant (can be up to 3 scans). Our CPAC processing did produce output for all scans. Ok so Xinian and I think Chao-Gan did not actually preprocess the additional scans, but Pierre did. Also Xinian and Chao-Gan did not concatenate their data for those subjects as the number of time-points was the same.</p>

<p>I also finished creating a script that checks on the filtered and globally corrected data.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">df <span class="o">&lt;-</span> read.csv<span class="p">(</span><span class="s">&quot;zcheck_exists_filt_global.csv&quot;</span><span class="p">)</span>
</span><span class="line">rownames<span class="p">(</span>df<span class="p">)</span> <span class="o">&lt;-</span> df<span class="o">$</span>X
</span><span class="line">df <span class="o">&lt;-</span> df<span class="p">[,</span><span class="m">-1</span><span class="p">]</span>
</span><span class="line">nrow<span class="p">(</span>df<span class="p">)</span> <span class="o">-</span> colSums<span class="p">(</span>df<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here is the output below. We can see that we have most of the data but there are a couple of bad (possibly very bad) subject data.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">                         alff                  anatomical_brain
</span><span class="line">                            <span class="m">3</span>                                 <span class="m">0</span>
</span><span class="line">          anatomical_reorient   anatomical_to_mni_nonlinear_xfm
</span><span class="line">                            <span class="m">0</span>                                 <span class="m">0</span>
</span><span class="line">              ants_affine_xfm                                dr
</span><span class="line">                            <span class="m">0</span>                                 <span class="m">3</span>
</span><span class="line">                        falff             functional_brain_mask
</span><span class="line">                            <span class="m">3</span>                                 <span class="m">2</span>
</span><span class="line">functional_brain_mask_to_standard          functional_freq_filtered
</span><span class="line">                            <span class="m">2</span>                                 <span class="m">3</span>
</span><span class="line">               functional_mni     functional_nuisance_residuals
</span><span class="line">                            <span class="m">3</span>                                 <span class="m">3</span>
</span><span class="line">functional_to_anat_linear_xfm                   mean_functional
</span><span class="line">                            <span class="m">2</span>                                 <span class="m">2</span>
</span><span class="line">    mni_normalized_anatomical                      preprocessed
</span><span class="line">                            <span class="m">0</span>                                 <span class="m">2</span>
</span><span class="line">                         reho
</span><span class="line">                            <span class="m">3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="abide-qc">ABIDE QC</h2>

<p>I was able to find Yang’s QC report in <code>/data/Projects/ABIDE_Initiative/CPAC/QC</code>.</p>

<p>Didn’t get a chance to regenerate the QC outputs but I think I might want to do this after I resolve that all the subject’s have data output with CPAC.</p>

<h2 id="centrality">Centrality</h2>

<p>Details for the military tactics taken to resolving the memory overage issues in the centrality, see <a href="http://czarrar.github.io/blog/2013/11/25/updating-centrality">this page</a>.</p>

<h3 id="memory-test">Memory Test</h3>

<p>Below are the results of running <code>./memtopX ./x_test_memprof.py</code> in <code>.../config/test_quick_pack</code>. I set a 1GB memory limit here, which led to two blocks being used. It seems further down that it came close to the this limit with 1.05GB being used.</p>

<p>Note that I’ve used 4mm data in standard space here, although later I also test with similar results using 3mm data.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">sorted nodes <span class="p">[</span><span class="m">0.0</span><span class="p">,</span> <span class="m">1.0</span><span class="p">]</span>
</span><span class="line">threshold_option <span class="o">--&gt;</span> <span class="m">0</span>
</span><span class="line">p_value <span class="o">-&gt;</span> <span class="m">0.266037302736</span>
</span><span class="line">r_value <span class="o">--&gt;</span>  <span class="m">0.0913878943802</span>
</span><span class="line">inside optimized_centraltity<span class="p">,</span> r_value <span class="o">-&gt;</span> <span class="m">0.0913878943802</span>
</span><span class="line">block_size <span class="o">-&gt;</span>  <span class="m">14236</span>
</span><span class="line">Setup Degree Output
</span><span class="line">Normalize TimeSeries
</span><span class="line">Computing centrality across <span class="m">18091</span> voxels
</span><span class="line">running block <span class="o">-&gt;</span> <span class="m">14236</span> <span class="m">0</span>
</span><span class="line">...correlating
</span><span class="line">...calculating degree
</span><span class="line">...removing correlation matrix
</span><span class="line">running block <span class="o">-&gt;</span> <span class="m">18091</span> <span class="m">14236</span>
</span><span class="line">...correlating
</span><span class="line">...calculating degree
</span><span class="line">...removing correlation matrix
</span><span class="line">timing<span class="o">:</span> <span class="m">32.47</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here is the corresponding output of <code>mem.log</code> that recorded the memory usage for my script every 30 seconds.</p>

<p>File /Users/zarrar/Dropbox/Journal/octopress/source/downloads/code/cpac_centrality_memory.log could not be found</p>

<p>With the 3mm data, I set a memory limit of 4GB at first. This leads to a maximum usage of 4.03GB in the first block (it’s lower in the next block). Pretty nice! If I set a memory limit instead of 1GB, then I get a maximum usage of 1.03GB (consistent in most blocks). Score.</p>

<h3 id="command-line-tool">Command-Line Tool</h3>

<p>To make it easier to directly call the centrality code, I created a command-line interface. This is in <code>C-PAC/tools</code> and the script is called <code>cpac_centrality.py</code>. The auto-generated help is shown below.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">usage<span class="o">:</span> cpac_centrality.py <span class="p">[</span><span class="o">-</span>h<span class="p">]</span> <span class="o">-</span>i INPUT <span class="p">[</span><span class="o">-</span>m MASK<span class="p">]</span> <span class="p">[</span><span class="o">--</span>degree<span class="p">]</span> <span class="p">[</span><span class="o">--</span>eigen<span class="p">]</span>
</span><span class="line">                          <span class="p">[</span><span class="o">--</span>binarize<span class="p">]</span> <span class="p">[</span><span class="o">--</span>weighted<span class="p">]</span> <span class="p">[</span><span class="o">--</span>sparsity SPARSITY<span class="p">]</span>
</span><span class="line">                          <span class="p">[</span><span class="o">--</span>pvalue PVALUE<span class="p">]</span> <span class="p">[</span><span class="o">--</span>rho RHO<span class="p">]</span> <span class="p">[</span><span class="o">--</span>memlimit MEMLIMIT<span class="p">]</span>
</span><span class="line">                          <span class="p">[</span><span class="o">-</span>o OUTDIR<span class="p">]</span>
</span><span class="line">
</span><span class="line">Compute centrality <span class="kr">for</span> a given timeseries.
</span><span class="line">
</span><span class="line">optional arguments<span class="o">:</span>
</span><span class="line">  <span class="o">-</span>h<span class="p">,</span> <span class="o">--</span>help            show this help message and exit
</span><span class="line">  <span class="o">-</span>i INPUT<span class="p">,</span> <span class="o">--</span>input INPUT
</span><span class="line">                        Input timeseries data file
</span><span class="line">  <span class="o">-</span>m MASK<span class="p">,</span> <span class="o">--</span>mask MASK  Brain mask <span class="p">(</span>by default the program will create a mask
</span><span class="line">                        where voxels have non<span class="o">-</span>zero variance regardeless of the
</span><span class="line">                        user specified mask<span class="p">)</span>.
</span><span class="line">  <span class="o">--</span>degree              Calculate degree centrality
</span><span class="line">  <span class="o">--</span>eigen               Calculate eigen centrality
</span><span class="line">  <span class="o">--</span>binarize            For a given voxel<span class="p">,</span> save the number of connections that
</span><span class="line">                        pass a threshold
</span><span class="line">  <span class="o">--</span>weighted            For a given voxel<span class="p">,</span> save the sum of all connection
</span><span class="line">                        weights that pass a threshold.
</span><span class="line">  <span class="o">--</span>sparsity SPARSITY   Sparsity based threshold. <span class="p">(</span>Only one threshold option
</span><span class="line">                        can be specified.<span class="p">)</span>
</span><span class="line">  <span class="o">--</span>pvalue PVALUE       P<span class="o">-</span>value threshold <span class="kr">for</span> each connection. <span class="p">(</span>Only one
</span><span class="line">                        threshold option can be specified.<span class="p">)</span>
</span><span class="line">  <span class="o">--</span>rho RHO             Regular correlation threshold. <span class="p">(</span>Only one threshold
</span><span class="line">                        option can be specified.<span class="p">)</span>
</span><span class="line">  <span class="o">--</span>memlimit MEMLIMIT   Memory limit that should be set.
</span><span class="line">  <span class="o">-</span>o OUTDIR<span class="p">,</span> <span class="o">--</span>outdir OUTDIR
</span><span class="line">                        Output directory
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
</feed>
